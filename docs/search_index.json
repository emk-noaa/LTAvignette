[["processing.html", " 4 Data processing Behind the scenes Review Validation", " 4 Data processing In our WHICEAS case study example, we are interested in estimating density/abundance for 2017 and 2020 only, but we want to use surveys from previous years to help model species detection functions. We will therefore be using a dataset of NOAA surveys in the Central North Pacific from 1986 to 2020. das_file &lt;- &#39;data/surveys/CenPac1986-2020_Final_alb.das&#39; You can process your survey data using a single function, process_surveys(), which takes two primary arguments: the filepath(s) to your DAS survey data, and your settings object. For example: cruz &lt;- process_surveys(das_file, settings) That single command will convert your raw DAS data to a “cruz” object, a list of polished datasets that are prepared to be passed to subsequent analyses. In our case we will use a third argument to apply edits to the DAS data before processing (see previous page for details on those edits): edits &lt;- readRDS(&#39;cnp_1986_2020_edits.RData&#39;) cruz &lt;- process_surveys(das_file, settings, edits) Behind the scenes The process_surveys() function is a wrapper for several discrete stages of data formatting/processing. Behind the scenes, each of those stages is carried out using a specific LTabundR function. The remainder of this page is a detailed step-by-step explanation of the data processing that occurs when you call process_surveys(). Edit cruise data If the edits input argument is supplied to process_surveys(), a temporary copy of the DAS file(s) are made and edited before processing. This step is discussed on the previous page. Bring in cruise data Read in and process your .DAS file using the functions in Sam Woodward’s swfscDAS package. To do so quickly, we built a wrapper function that makes this quick and easy: das &lt;- load_das(das_file, perform_checks = TRUE, print_glimpse = TRUE) Process strata Run the following function to add strata and study-area information to each row of DAS data: das_strata &lt;- process_strata(das, settings) This function loops through each stratum data.frame you have provided it in settings$strata, formats the stratum, and asks whether each DAS row occurs within it. For each stratum, a column named stratum_&lt;StratumName&gt; is added to the das object; each row in this column is TRUE (included) or FALSE. A similar procedure is run if a dataframe is provided in settings$study_area. A column named study_area is added to das containing a boolean (TRUE if the sub-segment or sighting occurs within the study area). Format DAS data into a cruz object The function format_das() takes care of some final formatting and initiates the cruz object data structure. cruz &lt;- format_das(das_strata, verbose=TRUE) This function (1) remove rows with invalid Cruise numbers, times, or locations; (ii) calculate the distance, in km, between each row of data; (iii) adds a ship column to the dataset, with initials for the ship corresponding to each cruise; (iv) creates a new list, cohorts, which copies the cruise data for each cohort specified in your settings; and (v) adds a stratum column to the data in each cohort. That column specifies a single stratum assignment for each row of DAS data in the event of overlapping strata, based upon the cohort setting stratum_overlap_handling. The cruz object The function format_das() returns a list, which we have saved in an object named cruz, with several slots: cruz %&gt;% names ## [1] &quot;settings&quot; &quot;strata&quot; &quot;cohorts&quot; The slots strata and study_area provide the area, in square km, of each polygon being used: cruz$strata ## stratum area ## 1 HI_EEZ 2474595.769 ## 2 OtherCNP 34215265.219 ## 3 MHI 212033.063 ## 4 WHICEAS 402948.734 ## 5 Spotted_OU 5102.666 ## 6 Spotted_FI 10509.869 ## 7 Spotted_BI 39454.720 ## 8 Bottlenose_KaNi 2755.024 ## 9 Bottlenose_OUFI 14417.035 ## 10 Bottlenose_BI 4668.072 ## 11 NWHI 449375.569 The slot cohorts is itself a list with one slot for each cohort. The slots are named using the id cohort setting. cruz$cohorts %&gt;% names ## [1] &quot;all&quot; &quot;bottlenose&quot; &quot;spotted&quot; Each cohort slot has a copy of the DAS data with a new stratum column, which contains a stratum assignment tailored to its cohort-specific settings. For instance, the all cohort, whose stratum_overlap_handling is set to \"smallest\", assigns the smallest stratum in the event of overlapping or nested strata: cruz$cohorts$all$stratum %&gt;% table(useNA=&#39;ifany&#39;) ## . ## HI_EEZ OtherCNP WHICEAS ## 117715 126248 85669 Since the bottlenose cohort uses a different subset of geostrata, its distribution of stratum assignments will also differ: cruz$cohorts$bottlenose$stratum %&gt;% table(useNA=&#39;ifany&#39;) ## . ## Bottlenose_BI Bottlenose_KaNi Bottlenose_OUFI HI_EEZ OtherCNP ## 3415 1495 6862 117715 126248 ## WHICEAS ## 73897 This list, with these five primary slots, will be referred to from hereon as a cruz object. Segmentize the data To allocate survey data into discrete ‘effort segments’, which are used in variance estimation in subsequent steps, run the function segmentize(). This process is controlled by both survey-wide and cohort-specific settings, which are now carried in a slot within the cruz object. The process is outlined in detail in the Appendix on Segmentizing. cruz &lt;- segmentize(cruz, verbose=FALSE) This function does not change the high-level structure of the cruz object … cruz %&gt;% names ## [1] &quot;settings&quot; &quot;strata&quot; &quot;cohorts&quot; … or the cohort names in the cohorts slot: cruz$cohorts %&gt;% names ## [1] &quot;all&quot; &quot;bottlenose&quot; &quot;spotted&quot; For each cohorts slot, the list structure is the same: cruz$cohorts$all %&gt;% names ## [1] &quot;segments&quot; &quot;das&quot; cruz$cohorts$bottlenose %&gt;% names ## [1] &quot;segments&quot; &quot;das&quot; cruz$cohorts$spotted %&gt;% names ## [1] &quot;segments&quot; &quot;das&quot; The segments slot contains summary data for each effort segment, including start/mid/end coordinates, average conditions, and segment distance: cruz$cohorts$all$segments %&gt;% glimpse ## Rows: 1,888 ## Columns: 37 ## $ Cruise &lt;dbl&gt; 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 90… ## $ ship &lt;chr&gt; &quot;Mc2&quot;, &quot;Mc2&quot;, &quot;Mc2&quot;, &quot;Mc2&quot;, &quot;Mc2&quot;, &quot;Mc2&quot;, &quot;Mc2&quot;, &quot;Mc2&quot;, &quot;… ## $ stratum &lt;chr&gt; &quot;WHICEAS&quot;, &quot;WHICEAS&quot;, &quot;WHICEAS&quot;, &quot;WHICEAS&quot;, &quot;WHICEAS&quot;, &quot;W… ## $ seg_id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… ## $ yday &lt;dbl&gt; 37, 41, 44, 44, 49, 55, 37, 37, 41, 43, 46, 47, 48, 37, 3… ## $ dist &lt;dbl&gt; 149.851072, 149.959115, 3.366761, 150.656675, 149.562750,… ## $ lat1 &lt;dbl&gt; 21.99817, 21.14833, 19.17733, 19.19833, 20.40850, 21.7600… ## $ lon1 &lt;dbl&gt; -159.1487, -158.0103, -156.0610, -156.0760, -156.1288, -1… ## $ DateTime1 &lt;dttm&gt; 2009-02-06 07:33:52, 2009-02-10 09:41:09, 2009-02-13 17:… ## $ timestamp1 &lt;dbl&gt; 1233905632, 1234258869, 1234545197, 1234548006, 123498100… ## $ lat2 &lt;dbl&gt; 21.14850, 19.18117, 19.19783, 20.40850, 21.76150, 21.6810… ## $ lon2 &lt;dbl&gt; -158.0097, -156.0583, -156.0758, -156.1288, -157.2517, -1… ## $ DateTime2 &lt;dttm&gt; 2009-02-10 09:40:54, 2009-02-13 17:11:22, 2009-02-13 17:… ## $ timestamp2 &lt;dbl&gt; 1234258854, 1234545082, 1234547957, 1234981000, 123549202… ## $ mlat &lt;dbl&gt; 19.57617, 21.37917, 19.18500, 19.80333, 22.46000, 21.7095… ## $ mlon &lt;dbl&gt; -156.0153, -160.3327, -156.0727, -155.0388, -160.4300, -1… ## $ mDateTime &lt;dttm&gt; 2009-02-08 07:57:43, 2009-02-11 10:36:04, 2009-02-13 17:… ## $ mtimestamp &lt;dbl&gt; 1233905632, 1234258869, 1234545197, 1234548006, 123498100… ## $ use &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRU… ## $ Mode &lt;chr&gt; &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C… ## $ EffType &lt;chr&gt; NA, &quot;N&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;… ## $ OnEffort &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE… ## $ ESWsides &lt;dbl&gt; NA, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ year &lt;dbl&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 200… ## $ month &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ day &lt;int&gt; 6, 10, 13, 13, 18, 24, 6, 6, 10, 12, 15, 16, 17, 6, 7, 7,… ## $ min_line &lt;int&gt; 424489, 425732, 426950, 426976, 428376, 429786, 424728, 4… ## $ max_line &lt;int&gt; 425731, 426949, 426975, 428375, 429785, 429845, 424824, 4… ## $ n_rows &lt;int&gt; 588, 606, 26, 611, 520, 38, 74, 31, 51, 211, 62, 22, 95, … ## $ avgBft &lt;dbl&gt; 3.937522, 2.669176, 3.000000, 4.236977, 5.318873, 6.61395… ## $ avgSwellHght &lt;dbl&gt; 3.665611, 2.942091, 4.000000, 4.295680, 5.762063, 7.38604… ## $ avgHorizSun &lt;dbl&gt; 5.476773, 5.353724, 4.000000, 7.670550, 4.988936, NaN, 4.… ## $ avgVertSun &lt;dbl&gt; 1.510175, 1.636948, 1.000000, 1.660281, 1.465219, NaN, 1.… ## $ avgGlare &lt;dbl&gt; 0.01104594, 0.24518732, 0.00000000, 0.11466734, 0.0000000… ## $ avgVis &lt;dbl&gt; 6.707940, 5.875014, 5.000000, 5.630527, 5.800907, 6.19302… ## $ avgCourse &lt;dbl&gt; 182.5003, 153.2785, 88.0000, 204.8376, 166.4348, 108.6140… ## $ avgSpdKt &lt;dbl&gt; 8.296386, 9.165131, 9.900000, 9.395206, 9.292142, 8.62279… # Number of segments cruz$cohorts$all$segments %&gt;% nrow ## [1] 1888 # Segment length distribution x &lt;- cruz$cohorts$all$segments$dist hist(x, breaks = seq(0,ceiling(max(x, na.rm=TRUE)),by=1), xlab=&#39;Segment lengths (km)&#39;, main=paste0(&#39;Target km: &#39;,settings$survey$segment_target_km)) And the das slot holds the original data.frame of DAS data, modified slightly: the column OnEffort has been modified according to Beaufort range conditions, and the column seg_id indicates which segment the event occurs within cruz$cohorts$all$das %&gt;% names ## [1] &quot;Event&quot; &quot;DateTime&quot; &quot;Lat&quot; &quot;Lon&quot; ## [5] &quot;OnEffort&quot; &quot;Cruise&quot; &quot;Mode&quot; &quot;OffsetGMT&quot; ## [9] &quot;EffType&quot; &quot;ESWsides&quot; &quot;Course&quot; &quot;SpdKt&quot; ## [13] &quot;Bft&quot; &quot;SwellHght&quot; &quot;WindSpdKt&quot; &quot;RainFog&quot; ## [17] &quot;HorizSun&quot; &quot;VertSun&quot; &quot;Glare&quot; &quot;Vis&quot; ## [21] &quot;ObsL&quot; &quot;Rec&quot; &quot;ObsR&quot; &quot;ObsInd&quot; ## [25] &quot;Data1&quot; &quot;Data2&quot; &quot;Data3&quot; &quot;Data4&quot; ## [29] &quot;Data5&quot; &quot;Data6&quot; &quot;Data7&quot; &quot;Data8&quot; ## [33] &quot;Data9&quot; &quot;Data10&quot; &quot;Data11&quot; &quot;Data12&quot; ## [37] &quot;EffortDot&quot; &quot;EventNum&quot; &quot;file_das&quot; &quot;line_num&quot; ## [41] &quot;stratum_HI_EEZ&quot; &quot;stratum_OtherCNP&quot; &quot;stratum_WHICEAS&quot; &quot;year&quot; ## [45] &quot;month&quot; &quot;day&quot; &quot;yday&quot; &quot;km_int&quot; ## [49] &quot;km_cum&quot; &quot;ship&quot; &quot;stratum&quot; &quot;seg_id&quot; ## [53] &quot;use&quot; The segmentize() function and its associated settings were designed to give researchers full control over how data are segmented, be it for design-based density analysis (which tend to use long segments of 100 km or more and allow for non-contiguous effort to be included in the same segment) or for habitat modeling (which tend to use short segments of 5 - 10 km and disallow non-contiguous effort to be pooled into the same segment). To demonstrate that versatility, checkout the appendix on segmentizing. Process sightings To process sightings for each cohort of species, use the function process_sightings(). This function has three basic steps: for each cohort, the function (1) prepares a sightings table using the function das_sight() from swfscDAS; (2) filters those sightings to species codes specified for the cohort in your settings input; and (3) evaluates each of those sightings, asking if each should be included in the analysis according to your settings. cruz &lt;- process_sightings(cruz) The function produces a formatted dataset and adds it to a new sightings slot. cruz$cohorts$all %&gt;% names ## [1] &quot;segments&quot; &quot;das&quot; &quot;sightings&quot; cruz$cohorts$bottlenose %&gt;% names ## [1] &quot;segments&quot; &quot;das&quot; &quot;sightings&quot; cruz$cohorts$spotted %&gt;% names ## [1] &quot;segments&quot; &quot;das&quot; &quot;sightings&quot; Note that the sightings table has a column named included (TRUE = yes, use it in the analysis). Any sightings that do not meet the inclusion criteria as specified in your settings will be included = FALSE, but they won’t be removed from the data. The sightings table also has a new column, ss_valid, indicating whether or not the school size estimate for this sighting is valid and appropriate for use in abundance estimation and detection function fitting when school size is used as a covariate. Since the sightings in each cohort are processed slightly differently according to the cohort’s specific settings – most importantly the species that will be included – you should expect different numbers of included/excluded sightings in each cohort dataset: cruz$cohorts$all$sightings$included %&gt;% table ## . ## FALSE TRUE ## 810 3124 cruz$cohorts$bottlenose$sightings$included %&gt;% table ## . ## FALSE TRUE ## 114 409 When this function’s verbose argument is TRUE (the default), a message is printed each time a sighting does not meet the inclusion criteria. Sightings data structure The sightings table has many other variables: cruz$cohorts$all$sightings %&gt;% names ## [1] &quot;Event&quot; &quot;DateTime&quot; &quot;Lat&quot; &quot;Lon&quot; ## [5] &quot;OnEffort&quot; &quot;Cruise&quot; &quot;Mode&quot; &quot;OffsetGMT&quot; ## [9] &quot;EffType&quot; &quot;ESWsides&quot; &quot;Course&quot; &quot;SpdKt&quot; ## [13] &quot;Bft&quot; &quot;SwellHght&quot; &quot;WindSpdKt&quot; &quot;RainFog&quot; ## [17] &quot;HorizSun&quot; &quot;VertSun&quot; &quot;Glare&quot; &quot;Vis&quot; ## [21] &quot;ObsL&quot; &quot;Rec&quot; &quot;ObsR&quot; &quot;ObsInd&quot; ## [25] &quot;EffortDot&quot; &quot;EventNum&quot; &quot;file_das&quot; &quot;line_num&quot; ## [29] &quot;stratum_HI_EEZ&quot; &quot;stratum_OtherCNP&quot; &quot;stratum_WHICEAS&quot; &quot;year&quot; ## [33] &quot;month&quot; &quot;day&quot; &quot;yday&quot; &quot;km_int&quot; ## [37] &quot;km_cum&quot; &quot;ship&quot; &quot;stratum&quot; &quot;seg_id&quot; ## [41] &quot;use&quot; &quot;SightNo&quot; &quot;Subgroup&quot; &quot;SightNoDaily&quot; ## [45] &quot;Obs&quot; &quot;ObsStd&quot; &quot;Bearing&quot; &quot;Reticle&quot; ## [49] &quot;DistNm&quot; &quot;Cue&quot; &quot;Method&quot; &quot;Photos&quot; ## [53] &quot;Birds&quot; &quot;CalibSchool&quot; &quot;PhotosAerial&quot; &quot;Biopsy&quot; ## [57] &quot;CourseSchool&quot; &quot;TurtleSp&quot; &quot;TurtleGs&quot; &quot;TurtleJFR&quot; ## [61] &quot;TurtleAge&quot; &quot;TurtleCapt&quot; &quot;PinnipedSp&quot; &quot;PinnipedGs&quot; ## [65] &quot;BoatType&quot; &quot;BoatGs&quot; &quot;PerpDistKm&quot; &quot;species&quot; ## [69] &quot;best&quot; &quot;low&quot; &quot;high&quot; &quot;prob&quot; ## [73] &quot;mixed&quot; &quot;ss_tot&quot; &quot;lnsstot&quot; &quot;ss_percent&quot; ## [77] &quot;n_sp&quot; &quot;n_obs&quot; &quot;n_best&quot; &quot;n_low&quot; ## [81] &quot;n_high&quot; &quot;calibr&quot; &quot;ss_valid&quot; &quot;mixed_max&quot; ## [85] &quot;spp_max&quot; &quot;included&quot; Columns 42 onwards correspond to sightings information. Columns of note: species contains the species code. There is only one species-code per row (i.e, multi-species sightings have been expanded to multiple rows). best, low, and high contain the refined group size estimates, averaged across observers and calibrated according to the cohort’s settings specifications. For multi-species sightings, these numbers represent the number of individuals for the single species represented in the row (i.e., the original group size estimate has been scaled by the percentage attritbuted to this species). The columns following those group size estimates (prob through spp_max) detail how group sizes were estimated: prob indicates whether probable species codes were accepted; mixed indicates whether this species’ sighting is part of a mixed-species sighting; n_sp provides the number of species occurring in this sighitng; n_obs gives the number of observers who contributed group size estimates; n_best through n_high gives the number of valid group size estimates given; and calibr indicates whether or not calibration was attempted for this sighting based on the settings (see next section); mixed_max indicates whether this species was the most abundant in the sighting (if multi-species); spp_max indicates the species code for the most abundant species in the sighting (if multi-species). As explained above, the final column, included, indicates whether this species should be included in the analysis. Here is a glimpse of the data: cruz$cohorts$all$sightings %&gt;% glimpse ## Rows: 3,934 ## Columns: 86 ## $ Event &lt;chr&gt; &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;… ## $ DateTime &lt;dttm&gt; 1986-11-26 09:00:00, 1986-11-26 14:40:00, 1986-11-26… ## $ Lat &lt;dbl&gt; 4.983333, 5.616667, 5.866667, 7.050000, 7.466667, 9.4… ## $ Lon &lt;dbl&gt; -120.9500, -121.6667, -121.9833, -123.5000, -123.9167… ## $ OnEffort &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ Cruise &lt;dbl&gt; 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989… ## $ Mode &lt;chr&gt; &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;… ## $ OffsetGMT &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ EffType &lt;chr&gt; &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;… ## $ ESWsides &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… ## $ Course &lt;dbl&gt; 310, 316, 313, 310, 310, 305, 305, 305, 305, 305, 305… ## $ SpdKt &lt;dbl&gt; 10.2, 9.9, 9.6, 10.2, 10.3, 9.8, 9.8, 9.6, 10.1, 10.1… ## $ Bft &lt;dbl&gt; 4, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 4, 5, 4, 4, 3, 1, 2,… ## $ SwellHght &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ WindSpdKt &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ RainFog &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ HorizSun &lt;dbl&gt; 6, 9, 10, NA, 7, 5, 5, 7, 8, 8, 8, 3, 5, NA, 4, NA, N… ## $ VertSun &lt;dbl&gt; 2, 1, 3, NA, 1, 3, 3, 1, 1, 1, 1, 2, 1, NA, 1, NA, NA… ## $ Glare &lt;lgl&gt; FALSE, FALSE, FALSE, NA, FALSE, FALSE, FALSE, FALSE, … ## $ Vis &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ ObsL &lt;chr&gt; &quot;004&quot;, &quot;022&quot;, &quot;056&quot;, &quot;056&quot;, &quot;004&quot;, &quot;031&quot;, &quot;031&quot;, &quot;004… ## $ Rec &lt;chr&gt; &quot;056&quot;, &quot;031&quot;, &quot;062&quot;, &quot;062&quot;, &quot;056&quot;, &quot;022&quot;, &quot;022&quot;, &quot;056… ## $ ObsR &lt;chr&gt; &quot;062&quot;, &quot;057&quot;, &quot;004&quot;, &quot;004&quot;, &quot;062&quot;, &quot;057&quot;, &quot;057&quot;, &quot;062… ## $ ObsInd &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ EffortDot &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ EventNum &lt;chr&gt; &quot;18&quot;, &quot;43&quot;, &quot;59&quot;, &quot;9&quot;, &quot;32&quot;, &quot;10&quot;, &quot;10&quot;, &quot;22&quot;, &quot;34&quot;, … ## $ file_das &lt;chr&gt; &quot;CenPac1986-2020_Final_alb.das&quot;, &quot;CenPac1986-2020_Fin… ## $ line_num &lt;int&gt; 10295, 10321, 10340, 10358, 10384, 10451, 10451, 1046… ## $ stratum_HI_EEZ &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS… ## $ stratum_OtherCNP &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ stratum_WHICEAS &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS… ## $ year &lt;dbl&gt; 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986,… ## $ month &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1… ## $ day &lt;int&gt; 26, 26, 26, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 3… ## $ yday &lt;dbl&gt; 330, 330, 330, 331, 331, 332, 332, 332, 332, 332, 332… ## $ km_int &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ km_cum &lt;dbl&gt; 64.38787, 172.92124, 221.24918, 248.23899, 317.83407,… ## $ ship &lt;chr&gt; &quot;DSJ&quot;, &quot;DSJ&quot;, &quot;DSJ&quot;, &quot;DSJ&quot;, &quot;DSJ&quot;, &quot;DSJ&quot;, &quot;DSJ&quot;, &quot;DSJ… ## $ stratum &lt;chr&gt; &quot;OtherCNP&quot;, &quot;OtherCNP&quot;, &quot;OtherCNP&quot;, &quot;OtherCNP&quot;, &quot;Othe… ## $ seg_id &lt;int&gt; 34, 35, 35, 35, 36, 37, 37, 37, 37, 37, 29, 38, 38, 3… ## $ use &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ SightNo &lt;chr&gt; &quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;01&quot;, &quot;02&quot;, &quot;01&quot;, &quot;01&quot;, &quot;02&quot;, &quot;03&quot;,… ## $ Subgroup &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ SightNoDaily &lt;chr&gt; &quot;19861126_1&quot;, &quot;19861126_2&quot;, &quot;19861126_3&quot;, &quot;19861127_1… ## $ Obs &lt;chr&gt; &quot;004&quot;, &quot;057&quot;, &quot;004&quot;, &quot;056&quot;, &quot;004&quot;, &quot;031&quot;, &quot;031&quot;, &quot;004… ## $ ObsStd &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ Bearing &lt;dbl&gt; 335, 354, 336, 18, 332, 333, 333, 6, 312, 312, 38, 80… ## $ Reticle &lt;dbl&gt; 8.41, 3.88, 0.50, 11.40, 0.80, 0.30, 0.30, 2.98, 0.40… ## $ DistNm &lt;dbl&gt; 0.4, 0.8, 3.2, 0.3, 2.5, 3.8, 3.8, 1.0, 3.5, 3.5, 7.0… ## $ Cue &lt;dbl&gt; 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 6, 6, 3, 2, 3, 2,… ## $ Method &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,… ## $ Photos &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ Birds &lt;chr&gt; &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;Y&quot;, &quot;Y&quot;, &quot;N&quot;, &quot;Y&quot;, &quot;Y&quot;, &quot;N&quot;… ## $ CalibSchool &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ PhotosAerial &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ Biopsy &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ CourseSchool &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ TurtleSp &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ TurtleGs &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ TurtleJFR &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ TurtleAge &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ TurtleCapt &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ PinnipedSp &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ PinnipedGs &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ BoatType &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ BoatGs &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ PerpDistKm &lt;dbl&gt; 0.3130756, 0.1548694, 2.4104840, 0.1716898, 2.1736533… ## $ species &lt;chr&gt; &quot;049&quot;, &quot;015&quot;, &quot;077&quot;, &quot;002&quot;, &quot;002&quot;, &quot;033&quot;, &quot;018&quot;, &quot;037… ## $ best &lt;dbl&gt; 2.318841, 8.843199, 4.637681, 27.517262, 21.826776, 3… ## $ low &lt;dbl&gt; 2.000000, 6.253644, 4.637681, 17.139473, 14.144886, 1… ## $ high &lt;dbl&gt; 2.000000, 10.711798, NA, 35.140620, 27.788449, 45.560… ## $ prob &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS… ## $ mixed &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE,… ## $ ss_tot &lt;dbl&gt; 2.318841, 8.843199, 4.637681, 27.517262, 21.826776, 3… ## $ lnsstot &lt;dbl&gt; 0.8410673, 2.1796487, 1.5342145, 3.3148135, 3.0831375… ## $ ss_percent &lt;dbl&gt; 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.0000000… ## $ n_sp &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ n_obs &lt;int&gt; 1, 3, 1, 3, 3, 3, 3, 5, 5, 5, 1, 1, 3, 4, 2, 2, 2, 5,… ## $ n_best &lt;int&gt; 1, 2, 0, 3, 3, 1, 1, 4, 5, 5, 0, 1, 3, 3, 1, 2, 2, 4,… ## $ n_low &lt;int&gt; 1, 3, 1, 3, 3, 3, 3, 5, 5, 5, 1, 1, 3, 4, 2, 2, 2, 5,… ## $ n_high &lt;int&gt; 1, 2, 0, 3, 3, 1, 1, 4, 5, 5, 0, 1, 3, 3, 1, 2, 2, 4,… ## $ calibr &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ ss_valid &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… ## $ mixed_max &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALS… ## $ spp_max &lt;chr&gt; &quot;049&quot;, &quot;015&quot;, &quot;077&quot;, &quot;002&quot;, &quot;002&quot;, &quot;033&quot;, &quot;033&quot;, &quot;037… ## $ included &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE,… Note that the process_sightings() function draws upon cruz$settings for inclusion criteria, but some of those settings can be overridden with the function’s manual inputs if you want to explore your options (see below). School size estimates In the settings we are using in this tutorial, school size estimates are adjusted using the calibration models from Barlow, Gerrodette, and Perryman (1998) (their analysis is refined slightly and further explained in Gerrodette, Perryman and Barlow, 2002). These calibration corrections are observer-specific. Most observers tend to underestimate school size and their estimates are adjusted up; others tend to overestimate and their estimates are adjusted down. Some observers do not have calibration coefficients, and for them a generic adjustment (upwards, by dividing estimates by 0.8625) is used. In LTabundR, each observer’s estimate is calibrated, then all observer estimates are averaged. To do that averaging, our settings specify that we shall use a geometric weighted mean, instead of an arithmetic mean, that weights school size estimates from multiple observers according to the variance of their calibration coefficients. Here are our current best estimates of school size: cruz$cohorts$all$sightings$best %&gt;% head(20) ## [1] 2.318841 8.843199 4.637681 27.517262 21.826776 31.713333 ## [7] 3.786667 3.478261 21.284389 221.965766 2.318841 1.159420 ## [13] 13.758964 6.242983 16.940000 18.247174 1.159420 38.004297 ## [19] 35.000000 16.596526 Let’s compare those estimates to unadjusted ones, in which calibration (and therefore weighted geometric mean) is turned off: cruz_demo &lt;- process_sightings(cruz, calibrate = FALSE, verbose = FALSE) cruz_demo$cohorts$all$sightings$best %&gt;% head(20) ## [1] 2.000000 8.485281 4.000000 21.897596 16.570558 23.226667 ## [7] 2.773333 3.000000 20.885620 217.807182 2.000000 1.000000 ## [13] 11.744603 5.517848 12.000000 15.000000 1.000000 38.985490 ## [19] 35.000000 14.642958 Note that, since calibration is only used for schools above a certain size, the difference between calibration and non-calibrated estimates becomes clearer in larger groups. You can also carry out calibration corrections without using a geometric weighted mean (the arithmetic mean will be used instead): cruz_demo &lt;- process_sightings(cruz, calibrate = TRUE, geometric_mean = FALSE, verbose = FALSE) cruz_demo$cohorts$all$sightings$best %&gt;% head(20) ## [1] 2.318841 9.217391 4.637681 27.866184 22.455556 31.713333 ## [7] 3.786667 3.478261 24.139715 251.742745 2.318841 1.159420 ## [13] 13.744928 6.198068 16.940000 18.095652 1.159420 46.792494 ## [19] 35.000000 17.131014 Note that when geometric_mean = TRUE but calibration is not carried out, the simple geometric mean is calculated instead of the weighted geometric mean, since the weights are the variance estimates from the calibration routine. Also note that school size calibration is only carried out if settings$group_size_calibration is not NULL. However, even when calibration coefficients are provided, it is possible to specify that calibration should only be carried out for raw estimates above a minimum threshold (see cohort setting calibration_floor, whose default is 0), since observers may be unlikely to mis-estimate the school size of a lone whale or pair. For observers who have calibration coefficients in the settings$group_size_coefficients table, that minimum is specified for each observer individually. For observers not in that table, calibration will only be applied to raw school size estimates above settings$cohorts[[i]]$calibration_floor or above. Subgroup size estimates After sightings data are processed, the process_surveys() function calls the subroutine process_subgroups() to find and calculate subgroup school size estimates for false killer whales, if any occur in the DAS data (Event code “G”). cruz &lt;- process_subgroups(cruz) If subgroups are found, a subgroups slot is added to the analysis list for a cohort. cruz$cohorts$all %&gt;% names ## [1] &quot;segments&quot; &quot;das&quot; &quot;sightings&quot; &quot;subgroups&quot; This subgroups slot holds a list with three dataframes: events (each row is a school size estimate for a single subgroup during a single phase – 1 or 2 – within a single sighting; this is effectively the raw data); subgroups (each row is a single phase for a single subgroup, with all school size estimates averaged together (both arithmetically and geometrically); and sightings (each row is a school size estimate for a single phase for a single sighting, with all subgroup school sizes summed together). cruz$cohorts$all$subgroups %&gt;% names ## [1] &quot;sightings&quot; &quot;subgroups&quot; &quot;events&quot; See the case study on false killer whales for detailed examples. Review By the end of this process, you have a single data object, cruz, with all the data you need to move forward into the next stages of mapping and analysis. The LTabundR function cruz_structure() provides a synopsis of the data structure: cruz_structure(cruz) ## &quot;cruz&quot; list structure ======================== ## ## $settings ## $strata --- with 11 polygon coordinate sets ## $survey --- with 10 input arguments ## $cohorts --- with 3 cohorts specified, each with 19 input arguments ## ## $strata ## ... containing a summary dataframe of 11 geostrata and their spatial areas ## ... geostratum names: ## HI_EEZ, OtherCNP, MHI, WHICEAS, Spotted_OU, Spotted_FI, Spotted_BI, Bottlenose_KaNi, Bottlenose_OUFI, Bottlenose_BI, NWHI ## ## $cohorts ## ## $all ## geostrata: WHICEAS, HI_EEZ, OtherCNP ## $segments --- with 1893 segments (median = 149.4 km) ## $das --- with 329638 data rows ## $sightings --- with 3934 detections ## $subgroups --- with 255 subgroups, 49 sightings, and 389 events ## ## $bottlenose ## geostrata: WHICEAS, HI_EEZ, OtherCNP, Bottlenose_BI, Bottlenose_OUFI, Bottlenose_KaNi ## $segments --- with 2049 segments (median = 148.7 km) ## $das --- with 329638 data rows ## $sightings --- with 523 detections ## ## $spotted ## geostrata: WHICEAS, HI_EEZ, OtherCNP, Spotted_OU, Spotted_FI, Spotted_BI ## $segments --- with 2056 segments (median = 148.4 km) ## $das --- with 329638 data rows ## $sightings --- with 527 detections Each species-specific cohort has its own list under cruz$cohorts, and each of these cohorts has the same list structure: segments is a summary table of segments. das is the raw DAS data, modified with seg_id to associate each row with a segment. sightings is a dataframe of sightings processed according to this cohort’s settings. subgroups (if any subgroup data exist in your survey) is a list with subgroup details. In each of these data.frame’s, there are three critically important columns to keep in mind: seg_id: this column is used to indicate the segment ID that a row of data belongs to. use: this column indicates whether a row of effort should be used in the line-transect analysis Every row of data within a single segment with have the same use value. included: this column occurs in the sightings dataframe only. It indicates whether the sightings should be included in line-transect analysis based on the specified settings. Any sighting with use == FALSE will also have included == FALSE, but it is possible for sightings to have use == TRUE with included == FALSE. For example, if the setting abeam_sightings is set to FALSE, a sighting with a bearing angle beyond the ship’s beam can be excluded from the analysis (included == FALSE) even though the effort segment it occurs within will still be used (use == TRUE). Finally, let’s save this cruz object locally, to use in downstream scripts: save(cruz,file=&#39;whiceas_cruz.RData&#39;) Validation To validate these LTabundR functions, we can compare its output to that of ABUND9, written by Jay Barlow (NOAA-NMFS). First, we bring in the ABUND9 output files: SIGHTS &lt;- read.csv(&#39;data/SIGHTS.csv&#39;) EFFORT &lt;- read.csv(&#39;data/EFFORT.csv&#39;) Sightings Pivot and format the ABUND SIGHTS data… abund &lt;- SIGHTS %&gt;% tidyr::pivot_longer(cols = 31:101, names_to = &#39;species&#39;, values_to = &#39;best&#39;) %&gt;% filter(best &gt; 0) %&gt;% mutate(Region = gsub(&#39; &#39;,&#39;&#39;,Region)) %&gt;% mutate(DateTime = paste0(Yr,&#39;-&#39;,Mo,&#39;-&#39;,Da,&#39; &#39;,Hr,&#39;:&#39;,Min)) …then summarize counts of species within each cruise: abund_summ &lt;- abund %&gt;% group_by(cruise = CruzNo, species) %&gt;% summarize(ntot_abund = n(), nsys_abund = length(which(! Region %in% c(&#39;NONE&#39;, &#39;Off-Transect&#39;) &amp; EffortSeg &gt; 0))) %&gt;% mutate(species = gsub(&#39;SP&#39;,&#39;&#39;,species)) Then do the same for LTabundR output: ltabundr &lt;- cruz$cohorts$all$sightings ltabundr_summ &lt;- ltabundr %&gt;% filter(OnEffort == TRUE) %&gt;% group_by(cruise = Cruise, species) %&gt;% summarize(ntot_ltabundr = n(), nsys_ltabundr = length(which(included == TRUE &amp; EffType %in% c(&#39;S&#39;,&#39;F&#39;)))) Now join these two datasets by cruise and species code: mr &lt;- full_join(abund_summ, ltabundr_summ, by=c(&#39;cruise&#39;, &#39;species&#39;)) mr %&gt;% head ## # A tibble: 6 × 6 ## # Groups: cruise [1] ## cruise species ntot_abund nsys_abund ntot_ltabundr nsys_ltabundr ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 901 002 3 2 3 2 ## 2 901 013 4 4 4 4 ## 3 901 015 2 1 2 1 ## 4 901 018 2 1 2 1 ## 5 901 031 1 1 1 1 ## 6 901 032 2 0 2 0 Compare the total On-Effort sightings in both outputs: mr$ntot_abund %&gt;% sum(na.rm=TRUE) ## [1] 3223 mr$ntot_ltabundr %&gt;% sum(na.rm=TRUE) ## [1] 3233 Compare total sightings valid for use in density estimation (EffType \"S\" or \"F\" only, as well as other criteria such as Bft 0 - 6): mr$nsys_abund %&gt;% sum(na.rm=TRUE) ## [1] 2478 mr$nsys_ltabundr %&gt;% sum(na.rm=TRUE) ## [1] 2484 Let’s find the rows with discrepancies in systematic effort: bads &lt;- which(mr$nsys_abund != mr$nsys_ltabundr | is.na(mr$nsys_abund) | is.na(mr$nsys_ltabundr)) bads %&gt;% length ## [1] 4 Let’s look at those rows in the joined dataframe: mr[bads, ] ## # A tibble: 4 × 6 ## # Groups: cruise [3] ## cruise species ntot_abund nsys_abund ntot_ltabundr nsys_ltabundr ## &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1165 047 NA NA 1 1 ## 2 1607 CU NA NA 5 4 ## 3 1607 PU NA NA 1 1 ## 4 1631 003 NA NA 1 0 To investigate each of these discrepancies, we will write a helper function that returns sightings details from both outputs for a given cruise-species: sight_compare &lt;- function(abund, ltabundr, cruise, spp){ message(&#39;ABUND:&#39;) abund %&gt;% filter(CruzNo == cruise, species == paste0(&#39;SP&#39;,spp)) %&gt;% select(5, 34, 26, 29, 33, 3) %&gt;% mutate(use_sit = EffortSeg != 0) %&gt;% select(-EffortSeg) %&gt;% arrange(desc(use_sit)) %&gt;% print abund %&gt;% filter(CruzNo == 1631) %&gt;% pull(species) %&gt;% table message(&#39;\\nLTabundR:&#39;) ltabundr %&gt;% filter(Cruise == cruise, species == spp) %&gt;% select(6, 2, 13, 73, 69, 5, 9, 41, 86) %&gt;% rename(sys_sit = included, use_effort = use) %&gt;% arrange(desc(use_effort)) %&gt;% tibble %&gt;% print } Discrepancies Cruise 1165, Species 047 In this case, LTabundR has a systematic sighting of a pygmy sperm whale, whereas ABUND does not have anything. sight_compare(abund, ltabundr, 1165, &#39;047&#39;) ## ABUND: ## # A tibble: 0 × 6 ## # … with 6 variables: CruzNo &lt;int&gt;, DateTime &lt;chr&gt;, Beauf &lt;int&gt;, Mixed &lt;chr&gt;, ## # best &lt;dbl&gt;, use_sit &lt;lgl&gt; ## ## LTabundR: ## # A tibble: 1 × 9 ## Cruise DateTime Bft mixed best OnEffort EffType use_ef…¹ sys_sit ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; ## 1 1165 1988-07-30 19:28:00 0 FALSE 1.16 TRUE S TRUE TRUE ## # … with abbreviated variable name ¹ use_effort (ltabundr %&gt;% filter(Cruise == 1165, species == &#39;047&#39;))[1,] ## Event DateTime Lat Lon OnEffort Cruise Mode OffsetGMT ## 1 S 1988-07-30 19:28:00 26.3 -121.1167 TRUE 1165 C NA ## EffType ESWsides Course SpdKt Bft SwellHght WindSpdKt RainFog HorizSun ## 1 S 2 163 10.5 0 NA NA 1 NA ## VertSun Glare Vis ObsL Rec ObsR ObsInd EffortDot EventNum ## 1 NA NA NA 038 068 051 &lt;NA&gt; TRUE 92 ## file_das line_num stratum_HI_EEZ stratum_OtherCNP ## 1 CenPac1986-2020_Final_alb_edited.das 50173 FALSE TRUE ## stratum_WHICEAS year month day yday km_int km_cum ship stratum seg_id use ## 1 FALSE 1988 7 30 212 0 13618.39 MAC OtherCNP 238 TRUE ## SightNo Subgroup SightNoDaily Obs ObsStd Bearing Reticle DistNm Cue Method ## 1 07 &lt;NA&gt; 19880730_9 051 TRUE 45 3.38 0.9 3 4 ## Photos Birds CalibSchool PhotosAerial Biopsy CourseSchool TurtleSp TurtleGs ## 1 &lt;NA&gt; N &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; NA ## TurtleJFR TurtleAge TurtleCapt PinnipedSp PinnipedGs BoatType BoatGs ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; NA ## PerpDistKm species best low high prob mixed ss_tot lnsstot ## 1 1.178606 047 1.15942 1 1.259921 FALSE FALSE 1.15942 0.1479201 ## ss_percent n_sp n_obs n_best n_low n_high calibr ss_valid mixed_max spp_max ## 1 1 1 3 3 3 3 TRUE TRUE TRUE 047 ## included ## 1 TRUE To investigate this sighting, we can filter our cruz object and take a look at a map of this sighting: cruzi &lt;- filter_cruz(cruz, spp=&#39;047&#39;, years = 1988) map_cruz(cruzi) We see that this sighting occurred just inside of the OtherCNP geostratum. It is likely that the point-in-polygon subroutines inside ABUND9 decided that this sighting was out of the study area, and therefore excluded it. The subroutines used by LTabundR, which are based in the R package sf, should not be wrong in this case. Cruise 1607, Species CU This species code, CU (Northern fur seal), was not used in the list of species for the ABUND9 input file. We could have specified that this species not be included in our load_cohort_settings() object above, but it is not an issue that this species has been included in the LTabundR output. Cruise 1607, Species PU Similar to above, this species code, PU (Unidentified pinniped), was not used in the list of species for the ABUND9 input file. Cruise 1631, Species 003 This non-systematic sighting of species 003 was found by LTabundR but not by ABUND. sight_compare(abund, ltabundr, 1631, &#39;003&#39;) ## ABUND: ## # A tibble: 0 × 6 ## # … with 6 variables: CruzNo &lt;int&gt;, DateTime &lt;chr&gt;, Beauf &lt;int&gt;, Mixed &lt;chr&gt;, ## # best &lt;dbl&gt;, use_sit &lt;lgl&gt; ## ## LTabundR: ## # A tibble: 1 × 9 ## Cruise DateTime Bft mixed best OnEffort EffType use_ef…¹ sys_sit ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; ## 1 1631 2006-09-02 07:35:14 5 TRUE 1 TRUE N TRUE TRUE ## # … with abbreviated variable name ¹ use_effort (ltabundr %&gt;% filter(Cruise == 1631, species == &#39;003&#39;)) ## Event DateTime Lat Lon OnEffort Cruise Mode OffsetGMT ## 1 S 2006-09-02 07:35:14 19.28883 -156.8227 TRUE 1631 P 10 ## EffType ESWsides Course SpdKt Bft SwellHght WindSpdKt RainFog HorizSun ## 1 N 2 155 10 5 4 18 1 10 ## VertSun Glare Vis ObsL Rec ObsR ObsInd EffortDot EventNum ## 1 2 FALSE 7 073 196 197 &lt;NA&gt; TRUE 026 ## file_das line_num stratum_HI_EEZ stratum_OtherCNP ## 1 CenPac1986-2020_Final_alb_edited.das 405222 TRUE TRUE ## stratum_WHICEAS year month day yday km_int km_cum ship stratum seg_id use ## 1 TRUE 2006 9 2 245 0 124035.2 Mc2 WHICEAS 1277 TRUE ## SightNo Subgroup SightNoDaily Obs ObsStd Bearing Reticle DistNm Cue Method ## 1 090 &lt;NA&gt; 20060902_38 197 TRUE 59 0.3 4.12 2 4 ## Photos Birds CalibSchool PhotosAerial Biopsy CourseSchool TurtleSp TurtleGs ## 1 N N &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; NA ## TurtleJFR TurtleAge TurtleCapt PinnipedSp PinnipedGs BoatType BoatGs ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; NA &lt;NA&gt; NA ## PerpDistKm species best low high prob mixed ss_tot lnsstot ss_percent ## 1 6.540392 003 1 NaN NA FALSE TRUE 3.478261 1.246532 NaN ## n_sp n_obs n_best n_low n_high calibr ss_valid mixed_max spp_max included ## 1 2 1 0 1 0 TRUE FALSE FALSE &lt;NA&gt; TRUE The map indicates that this is not a geostratum boundary issue: cruzi &lt;- filter_cruz(cruz, spp=&#39;003&#39;, years = 2006) map_cruz(cruzi) Looking at the raw DAS data … das_inspector(das_file) das$das[405190:405220] It appears that this was a multi-species sighting, but percentages were only provided for one species and the overall school size was quite low. Currently we are not sure why ABUND ignored this sighting. School sizes # Format ABUND abund &lt;- SIGHTS %&gt;% tidyr::pivot_longer(cols = 31:101, names_to = &#39;species&#39;, values_to = &#39;best&#39;) %&gt;% mutate(Region = gsub(&#39; &#39;,&#39;&#39;,Region)) %&gt;% filter(best &gt; 0, ! Region %in% c(&#39;NONE&#39;, &#39;Off-Transect&#39;), EffortSeg &gt; 0) %&gt;% select(Cruise = CruzNo, TotSS, LnTotSS, species, best) %&gt;% mutate(Software=&#39;ABUND9&#39;) nrow(abund) ## [1] 2478 # Format LTabundR ltabundr &lt;- cruz$cohorts$all$sightings %&gt;% filter(OnEffort == TRUE, included == TRUE, EffType %in% c(&#39;S&#39;, &#39;F&#39;)) %&gt;% select(Cruise, TotSS = ss_tot, LnTotSS = lnsstot, species, best) %&gt;% mutate(Software=&#39;LTabundR&#39;) # Combine the datasets ss &lt;- rbind(abund, ltabundr) # Plot the datasets ggplot(ss, aes(x=best, y=factor(Cruise), col=Software, pch=Software)) + geom_point(position=ggstance::position_dodgev(height=0.5), alpha=.6) + scale_x_continuous(trans=&#39;log&#39;, breaks=c(1,2, 5,10,25,50,100,500,1000,2500,5000)) + xlab(&#39;log Estimated School Size&#39;) + ylab(&#39;Cruise&#39;) + theme_light() Effort # Format ABUND abund &lt;- EFFORT %&gt;% mutate(Region = gsub(&#39; &#39;,&#39;&#39;,Region)) %&gt;% mutate(dt = paste0(Yr, stringr::str_pad(Mo, width=2, pad=&#39;0&#39;, side=&#39;left&#39;), stringr::str_pad(Da, width=2, pad=&#39;0&#39;, side=&#39;left&#39;))) %&gt;% filter(! Region %in% c(&#39;NONE&#39;, &#39;Off-Transect&#39;), EffortSeg &gt; 0) %&gt;% select(Cruise = CruzNo, Date = dt, km = length) %&gt;% mutate(software = &#39;ABUND9&#39;) # Format LTabundR ltabundr &lt;- cruz$cohorts$all$segments %&gt;% mutate(dt = gsub(&#39;-&#39;,&#39;&#39;,substr(DateTime1, 1,10))) %&gt;% filter(OnEffort == TRUE, use == TRUE, EffType %in% c(&#39;S&#39;, &#39;F&#39;)) %&gt;% select(Cruise, Date = dt, km = dist) %&gt;% mutate(software = &#39;LTabundR&#39;) # Join the datasets eff &lt;- rbind(abund, ltabundr) %&gt;% group_by(Cruise) %&gt;% mutate(km = round(km)) %&gt;% summarize(km_abund = sum(km[software == &#39;ABUND9&#39;]), km_ltabundr = sum(km[software == &#39;LTabundR&#39;])) # Plot p &lt;- ggplot(eff, aes(x = km_abund, y = km_ltabundr, col=factor(Cruise))) + geom_abline(slope=1, intercept=0, lty=3) + geom_point(alpha=.6) + ylab(&#39;LTabundR&#39;) + xlab(&#39;ABUND9&#39;) + scale_x_continuous(breaks = seq(0, 15000, by=2500)) + scale_y_continuous(breaks = seq(0, 15000, by=2500)) + labs(title=&#39;Systematic effort per cruise&#39;, col=&#39;Cruise&#39;) + theme_light() # Make it interactive ggplotly(p) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
