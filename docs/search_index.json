[["whiceas.html", " 14 WHICEAS Data processing Data exploration Rg0 Density &amp; abundance Results Validation", " 14 WHICEAS Here we demonstrate code that reproduces the Bradford et al. (2022) WHICEAS report within the new LTabundR framework. This study estimates cetacean abundance for Hawaiian WHICEAS study area for 2017 and 2020. Here we use survey data from 1986 to 2020 to estimate Relative g(0) and detection functions. Currently, coefficients of variation (CV) of density and abundance are estimated using only 100 bootstrap iterations (the publication uses 1,000) to reduce processing time. library(dplyr) library(LTabundR) Data processing Settings Survey-wide settings data(species_codes) data(ships) data(group_size_coefficients) edits &lt;- readRDS(&#39;cnp_1986_2020_edits.RData&#39;) survey &lt;- load_survey_settings( out_handling = &#39;remove&#39;, max_row_interval = Inf, segment_method = &quot;equallength&quot;, segment_target_km = 150, segment_max_interval = 24, segment_remainder_handling = c(&quot;segment&quot;), ship_list = ships, species_codes = species_codes, group_size_coefficients = group_size_coefficients, smear_angles = FALSE ) Geostrata data(strata_cnp) Cohort-specific settings Cohort 1: all species all_species &lt;- load_cohort_settings( id = &quot;all&quot;, # * species = NULL, strata = c(&#39;WHICEAS&#39;, &#39;HI_EEZ&#39;, &#39;OtherCNP&#39;), # * probable_species = FALSE, sighting_method = 0, cue_range = 0:7, school_size_range = c(0, 10000), school_size_calibrate = TRUE, calibration_floor = 0, use_low_if_na = TRUE, io_sightings = 0, geometric_mean_group = TRUE, truncation_km = 7.5, # * beaufort_range = 0:6, abeam_sightings = TRUE, strata_overlap_handling = c(&quot;smallest&quot;), distance_types = c(&#39;S&#39;,&#39;F&#39;,&#39;N&#39;), distance_modes = c(&#39;P&#39;,&#39;C&#39;), distance_on_off = TRUE ) Cohort 2: bottlenose dolphins bottlenose &lt;- load_cohort_settings( id = &quot;bottlenose&quot;, species = c(&#39;015&#39;, &#39;018&#39;, &#39;021&#39;, &#39;032&#39;), strata = c(&#39;WHICEAS&#39;, &#39;HI_EEZ&#39;, &#39;OtherCNP&#39;, &#39;Bottlenose_BI&#39;, &#39;Bottlenose_OUFI&#39;, &#39;Bottlenose_KaNi&#39;), truncation_km = 7.5) Cohort 3: pantropical spotted dolphins spotted &lt;- load_cohort_settings( id = &quot;spotted&quot;, species = &#39;002&#39;, strata = c(&#39;WHICEAS&#39;, &#39;HI_EEZ&#39;, &#39;OtherCNP&#39;, &#39;Spotted_OU&#39;,&#39;Spotted_FI&#39;,&#39;Spotted_BI&#39;), truncation_km = 7.5) Process settings &lt;- load_settings(strata = strata_cnp, survey = survey, cohorts = list(all_species, bottlenose, spotted)) cruz &lt;- process_surveys(das_file = &#39;data/surveys/CenPac1986-2020_Final_alb.das&#39;, settings = settings, edits = edits) save(cruz, file=&#39;whiceas/whiceas_cruz.RData&#39;) load(&#39;whiceas/whiceas_cruz.RData&#39;) Data exploration Processed data structure cruz_structure(cruz) Map of sightings For the entire cruz object: map_cruz(cruz, sightings_color = &#39;firebrick&#39;) For just the surveys of interest: # Filter cruz1720 &lt;- filter_cruz(cruz, years = c(2017, 2020), regions = &#39;WHICEAS&#39;, eff_types = &#39;S&#39;, bft_range = 0:6) # Map, including survey tracks map_cruz(cruz1720, sightings_color = &#39;firebrick&#39;, effort_show = TRUE, effort_resolution = 3, effort_weight = 4, effort_opacity = .4) Interactive dashboard Use this to determine truncation distances. Note them in your lta() code below: cruz_explorer(cruz) Rg0 We can use the built-in dataset, data(g0_results), which has Beaufort-specific Relative g(0) estimates for most species based on 1986-2020 surveys. data(&quot;g0_results&quot;) Rg0 &lt;- g0_results # Plot the results: g0_plot(Rg0, panes = 3) To explore the effects of LTabundR’s g(0) estimation routines on our abundance estimates, we will be running the analyses below with three different g(0) scenarios. In scenario 1, we will manually specify the weighted g(0) and its CV for each species in 2020; these results should be nearly exact replicates of those from Bradford et al. (2021), and we can be sure that any discrepancy between the two sets of results are not attributable the g(0) aspect of the analysis. Second, we will allow LTabundR to calculate the weighted g(0) and its CV using the same Relative g(0) values that were used in Bradford et al. (2021) (i.e., the results of Barlow (2015), which used surveys from 1986 to 2010 and is provided in LTabundR as a built-in dataset), such that any difference between scenarios 1 and 2 are likely due to the weighted g(0) subroutines. Finally, in scenario 3, we will use the Relative g(0) esitmates produced by LTabundR using a more extensive survey dataset (1986-2020). For each g(0) scenario, our Rg0 object and results_path will differ: # Specify scenario number here g0_scenario &lt;- 1 # Set Rg0 source and results path if(g0_scenario == 1){ # Using manually-specified g0 and its CV Rg0 &lt;- NULL results_path &lt;- &#39;whiceas/lta_manual/&#39; } if(g0_scenario == 2){ # Using Rg0 estimates from Barlow 2015 data(barlow_2015) Rg0 &lt;- barlow_2015 results_path &lt;- &#39;whiceas/lta_barlow/&#39; } if(g0_scenario == 3){ # New LTabundR estimates of Rg0 data(g0_results) Rg0 &lt;- g0_results results_path &lt;- &#39;whiceas/lta/&#39; } Density &amp; abundance First we can define common values that will be constant across all estimates we produce: bootstraps &lt;- 200 years &lt;- 1986:2020 fit_regions &lt;- NULL fit_not_regions &lt;- NULL toplot = TRUE verbose = TRUE df_settings &lt;- list(covariates = c(&#39;bft&#39;,&#39;lnsstot&#39;,&#39;cruise&#39;,&#39;year&#39;,&#39;ship&#39;,&#39;species&#39;), covariates_factor = c(FALSE, FALSE, TRUE, TRUE, TRUE, TRUE), covariates_levels = 2, covariates_n_per_level = 10, simplify_cue = TRUE, simplify_bino = TRUE, detection_function_base = &#39;hn&#39;, base_model = &#39;~1&#39;, delta_aic = 2) For most species, we want to estimate density/abundance for the same set of year-region scenarios. To reduce code redundancy, as well as the risk of typing errors (and our work!), we can use the LTabundR function lta_estimates() to economize how we prepare our estimates input. For most species, these are the year-region scenarios for which we want estimates: scenarios &lt;- list(list(years = 2017, regions = &#39;WHICEAS&#39;), list(years = 2020, regions = &#39;WHICEAS&#39;)) The lta_estimates() function will generate a custom function that makes it easy to create a set of estimates sub-lists for each species of interest: estimator &lt;- lta_estimates(scenarios) That result, estimator, is actually a function. Here’s an example of how this function will work, using the first species pool as an example: estimates &lt;- c(estimator(spp = &#39;013&#39;, title = &quot;Striped dolphin&quot;), estimator(spp = &#39;026&#39;, title = &quot;Fraser&#39;s dolphin&quot;, alt_g0_spp = &#39;013&#39;), estimator(spp = &#39;031&#39;, title = &quot;Melon-headed whale&quot;, alt_g0_spp = &#39;013&#39;)) estimates ## [[1]] ## [[1]]$years ## [1] 2017 ## ## [[1]]$regions ## [1] &quot;WHICEAS&quot; ## ## [[1]]$spp ## [1] &quot;013&quot; ## ## [[1]]$title ## [1] &quot;Striped dolphin&quot; ## ## ## [[2]] ## [[2]]$years ## [1] 2020 ## ## [[2]]$regions ## [1] &quot;WHICEAS&quot; ## ## [[2]]$spp ## [1] &quot;013&quot; ## ## [[2]]$title ## [1] &quot;Striped dolphin&quot; ## ## ## [[3]] ## [[3]]$years ## [1] 2017 ## ## [[3]]$regions ## [1] &quot;WHICEAS&quot; ## ## [[3]]$spp ## [1] &quot;026&quot; ## ## [[3]]$title ## [1] &quot;Fraser&#39;s dolphin&quot; ## ## [[3]]$alt_g0_spp ## [1] &quot;013&quot; ## ## ## [[4]] ## [[4]]$years ## [1] 2020 ## ## [[4]]$regions ## [1] &quot;WHICEAS&quot; ## ## [[4]]$spp ## [1] &quot;026&quot; ## ## [[4]]$title ## [1] &quot;Fraser&#39;s dolphin&quot; ## ## [[4]]$alt_g0_spp ## [1] &quot;013&quot; ## ## ## [[5]] ## [[5]]$years ## [1] 2017 ## ## [[5]]$regions ## [1] &quot;WHICEAS&quot; ## ## [[5]]$spp ## [1] &quot;031&quot; ## ## [[5]]$title ## [1] &quot;Melon-headed whale&quot; ## ## [[5]]$alt_g0_spp ## [1] &quot;013&quot; ## ## ## [[6]] ## [[6]]$years ## [1] 2020 ## ## [[6]]$regions ## [1] &quot;WHICEAS&quot; ## ## [[6]]$spp ## [1] &quot;031&quot; ## ## [[6]]$title ## [1] &quot;Melon-headed whale&quot; ## ## [[6]]$alt_g0_spp ## [1] &quot;013&quot; The output of estimator() is a list of sub-lists specifying a set of density/abundance estimates you want to produce based on the detection function for a single species pool. Here is the full code for producing those estimates for all species from Bradford et al. (2021): Multi-species pool 1 # Striped dolphin (013), Fraser&#39;s dolphin (026), Melon-headed whale (031) if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;013&#39;, &#39;026&#39;, &#39;031&#39;), pool = &#39;Multi-species pool 1&#39;, cohort = &#39;all&#39;, truncation_distance = 5, other_species = &#39;remove&#39;, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- c(estimator(spp = &#39;013&#39;, title = &quot;Striped dolphin&quot;), estimator(spp = &#39;026&#39;, title = &quot;Fraser&#39;s dolphin&quot;, alt_g0_spp = &#39;013&#39;), estimator(spp = &#39;031&#39;, title = &quot;Melon-headed whale&quot;, alt_g0_spp = &#39;013&#39;)) estimates # Manually specify g0 and its CV -- only for g0_scenario 1 # Two specifications per species, one for 2017 and one for 2020 if(g0_scenario==1){ # Striped estimates[[1]]$g0 &lt;- 0.35; estimates[[1]]$g0_cv &lt;- 0.19 estimates[[2]]$g0 &lt;- 0.31; estimates[[2]]$g0_cv &lt;- 0.22 # Fraser&#39;s estimates[[3]]$g0 &lt;- 0.35; estimates[[3]]$g0_cv &lt;- 0.10 estimates[[4]]$g0 &lt;- 0.31; estimates[[4]]$g0_cv &lt;- 0.22 # Melon-headed estimates[[5]]$g0 &lt;- 0.35; estimates[[5]]$g0_cv &lt;- 0.19 estimates[[6]]$g0 &lt;- 0.31; estimates[[6]]$g0_cv &lt;- 0.22 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Multi-species pool 2 # Rough-toothed dolphin (15), Common bottlenose dolphin (18), Risso&#39;s (21), # Pygmy killer whale (32) # Notes # Bottlenose abundance is estimated in a separate cohort, but included here for DF fitting if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;015&#39;, &#39;018&#39;, &#39;021&#39;, &#39;032&#39;), pool = &#39;Multi-species pool 2&#39;, cohort = &#39;all&#39;, truncation_distance = 5, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- c(estimator(spp = &#39;015&#39;, title = &quot;Rough-toothed dolphin&quot;), estimator(spp = &#39;021&#39;, title = &quot;Risso&#39;s dolphin&quot;), estimator(spp = &#39;032&#39;, title = &quot;Pygmy killer whale&quot;)) if(g0_scenario==1){ # Rough-toothed estimates[[1]]$g0 &lt;- 0.09; estimates[[1]]$g0_cv &lt;- 0.45 estimates[[2]]$g0 &lt;- 0.07; estimates[[2]]$g0_cv &lt;- 0.51 # Risso&#39;s estimates[[3]]$g0 &lt;- 0.57; estimates[[3]]$g0_cv &lt;- 0.18 estimates[[4]]$g0 &lt;- 0.52; estimates[[4]]$g0_cv &lt;- 021 # Pygmy killer estimates[[5]]$g0 &lt;- 0.14; estimates[[5]]$g0_cv &lt;- 0.25 estimates[[6]]$g0 &lt;- 0.11; estimates[[6]]$g0_cv &lt;- 0.28 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Multi-species pool 3 # Short-finned pilot whale (036), Longman&#39;s beaked whale (065) # No Rg(0) available for Longman&#39;s -- will use SF pilot whale instead to estimate its weighted g0 if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;036&#39;, &#39;065&#39;), pool = &#39;Multi-species pool 3&#39;, cohort = &#39;all&#39;, truncation_distance = 5, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- c(estimator(spp = &#39;036&#39;, title = &quot;Short-finned pilot whale&quot;), estimator(spp = &#39;065&#39;, title = &quot;Longman&#39;s beaked whale&quot;, alt_g0_spp = &#39;036&#39;)) if(g0_scenario==1){ # Short-finned estimates[[1]]$g0 &lt;- 0.58; estimates[[1]]$g0_cv &lt;- 0.15 estimates[[2]]$g0 &lt;- 0.52; estimates[[2]]$g0_cv &lt;- 0.19 # Longman&#39;s estimates[[3]]$g0 &lt;- 0.58; estimates[[3]]$g0_cv &lt;- 0.15 estimates[[4]]$g0 &lt;- 0.52; estimates[[4]]$g0_cv &lt;- 0.19 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Multi-species pool 4 # Killer whale (37), sperm whale (46) if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;037&#39;, &#39;046&#39;), pool = &#39;Multi-species pool 4&#39;, cohort = &#39;all&#39;, truncation_distance = 5.5, other_species = &#39;remove&#39;, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- c(estimator(spp = &#39;037&#39;, title = &quot;Killer whale&quot;), estimator(spp = &#39;046&#39;, title = &quot;Sperm whale&quot;)) if(g0_scenario==1){ # Killer (no sightings in ALB et al 2021) estimates[[1]]$g0 &lt;- 1; estimates[[1]]$g0_cv &lt;- 0 estimates[[2]]$g0 &lt;- 1; estimates[[2]]$g0_cv &lt;- 0 # Sperm estimates[[3]]$g0 &lt;- 0.63; estimates[[3]]$g0_cv &lt;- 0.34 estimates[[4]]$g0 &lt;- 0.61; estimates[[4]]$g0_cv &lt;- 0.37 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Multi-species pool 5 # Pygmy sperm whale (47), dwarf sperm whale (48), UNID Kogia (80), # Blainville&#39;s beaked whale (59), Cuvier&#39;s beaked whale (61), # UNID Mesoplodon (51), UNID beaked whale (49), Minke whale (71) if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;047&#39;, &#39;048&#39;, &#39;080&#39;, &#39;059&#39;, &#39;061&#39;, &#39;051&#39;, &#39;049&#39;, &#39;071&#39;), pool = &#39;Multi-species pool 5&#39;, cohort = &#39;all&#39;, truncation_distance = 4.5, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- c(estimator(spp = &#39;047&#39;, title = &quot;Pygmy sperm whale&quot;), estimator(spp = &#39;048&#39;, title = &quot;Dwarf sperm whale&quot;), estimator(spp = &#39;080&#39;, title = &quot;Unidentified Kogia&quot;), estimator(spp = &#39;059&#39;, title = &quot;Blainville&#39;s beaked whale&quot;), estimator(spp = &#39;061&#39;, title = &quot;Cuvier&#39;s beaked whale&quot;), estimator(spp = &#39;051&#39;, title = &quot;Unidentified Mesoplodon&quot;), estimator(spp = &#39;049&#39;, title = &quot;Unidentified beaked whale&quot;, alt_g0_spp = c(&#39;061&#39;,&#39;051&#39;), combine_g0 = TRUE), estimator(spp = &#39;071&#39;, title = &quot;Minke whale&quot;)) # Note Barlow2015 provides absolute estimates for Cuviers and UNID Mesop if(g0_scenario==1){ # Pygmy sperm (no sightings in ALB, using other kogia values) estimates[[1]]$g0 &lt;- 0.005; estimates[[1]]$g0_cv &lt;- 0.15 estimates[[2]]$g0 &lt;- 0.004; estimates[[2]]$g0_cv &lt;- 0.15 # Dwarf sperm (no ALB sightings in 2017, using 2020 g0) estimates[[3]]$g0 &lt;- 0.005; estimates[[3]]$g0_cv &lt;- 0.15 estimates[[4]]$g0 &lt;- 0.004; estimates[[4]]$g0_cv &lt;- 0.15 # UNID Kogia (no ALB sightings 2020, using 2017 g0) estimates[[5]]$g0 &lt;- 0.005; estimates[[5]]$g0_cv &lt;- 0.15 estimates[[6]]$g0 &lt;- 0.004; estimates[[6]]$g0_cv &lt;- 0.15 # Blainville&#39;s (no ALB sightings 2017, using 2020 g0) estimates[[7]]$g0 &lt;- 0.11; estimates[[7]]$g0_cv &lt;- 0.30 estimates[[8]]$g0 &lt;- 0.11; estimates[[6]]$g0_cv &lt;- 0.30 # Cuvier&#39;s (no sightings in ALB -- using unid beaked g0) estimates[[9]]$g0 &lt;- 0.13; estimates[[9]]$g0_cv &lt;- 0.20 estimates[[10]]$g0 &lt;- 0.11; estimates[[10]]$g0_cv &lt;- 0.21 # UNID Mesop (no ALB sightings 2017, using 2020 g0) estimates[[11]]$g0 &lt;- 0.11; estimates[[11]]$g0_cv &lt;- 0.30 estimates[[12]]$g0 &lt;- 0.11; estimates[[12]]$g0_cv &lt;- 0.30 # UNID beaked estimates[[13]]$g0 &lt;- 0.13; estimates[[13]]$g0_cv &lt;- 0.20 estimates[[14]]$g0 &lt;- 0.11; estimates[[14]]$g0_cv &lt;- 0.21 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Multi-species pool 6 # Bryde&#39;s whale (72), Sei whale (73), Fin whale (74), Blue whale (75), # Sei/Bryde&#39;s (99), Fin/Sei/Bryde&#39;s (72, 73, 74, 99) # Bryde&#39;s, Sei&#39;s, and Sei/Bryde&#39;s all use same Rg0 (title = &quot;Sei/Bryde&#39;s&quot;) # Sei/Bryde&#39;s/Fin use an average of Fin and Sei/Bryde&#39;s. if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;072&#39;, &#39;073&#39;, &#39;074&#39;,&#39;075&#39;,&#39;099&#39;), pool = &#39;Multi-species pool 6&#39;, cohort = &#39;all&#39;, truncation_distance = 5.0, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- c(estimator(spp = &#39;072&#39;, title = &quot;Bryde&#39;s whale&quot;), estimator(spp = &#39;073&#39;, title = &quot;Sei whale&quot;), estimator(spp = &#39;074&#39;, title = &quot;Fin whale&quot;), estimator(spp = &#39;075&#39;, title = &quot;Blue whale&quot;), estimator(spp = &#39;099&#39;, title = &quot;Sei/Bryde&#39;s whale&quot;), estimator(spp = c(&#39;072&#39;, &#39;073&#39;, &#39;099&#39;, &#39;074&#39;), title = &quot;Sei/Bryde&#39;s/Fin whale&quot;, combine_g0 = TRUE)) if(g0_scenario==1){ # Brydes (no ALB sightings -- using sei values) estimates[[1]]$g0 &lt;- 0.38; estimates[[1]]$g0_cv &lt;- 0.21 estimates[[2]]$g0 &lt;- 0.38; estimates[[2]]$g0_cv &lt;- 0.21 # Sei (no ALB sightings in 2017, using 2020 g0) estimates[[3]]$g0 &lt;- 0.38; estimates[[3]]$g0_cv &lt;- 0.21 estimates[[4]]$g0 &lt;- 0.38; estimates[[4]]$g0_cv &lt;- 0.21 # Fin (no ALB sightings in 2017, using 2020 g0) estimates[[5]]$g0 &lt;- 0.30; estimates[[5]]$g0_cv &lt;- 0.29 estimates[[6]]$g0 &lt;- 0.30; estimates[[6]]$g0_cv &lt;- 0.29 # Blue (no ALB sightings, using fin values) estimates[[7]]$g0 &lt;- 0.30; estimates[[7]]$g0_cv &lt;- 0.29 estimates[[8]]$g0 &lt;- 0.30; estimates[[8]]$g0_cv &lt;- 0.29 # Sei / Bryde&#39;s (no ALB sightings in 2017, using 2020 g0) estimates[[9]]$g0 &lt;- 0.38; estimates[[9]]$g0_cv &lt;- 0.21 estimates[[10]]$g0 &lt;- 0.38; estimates[[10]]$g0_cv &lt;- 0.21 # Sei / Bryde&#39;s / Fin (no ALB sightings in 2017, using 2020 g0) estimates[[11]]$g0 &lt;- 0.34; estimates[[11]]$g0_cv &lt;- 0.17 estimates[[12]]$g0 &lt;- 0.34; estimates[[12]]$g0_cv &lt;- 0.17 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Humpback whale if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;076&#39;), pool = &#39;Humpback whale&#39;, cohort = &#39;all&#39;, truncation_distance = 5.5, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;-c(estimator(spp = &#39;076&#39;, title = &quot;Humpback whale&quot;)) if(g0_scenario==1){ # No ALB sightings in 2017, using 2020 g0 estimates[[1]]$g0 &lt;- 0.68; estimates[[1]]$g0_cv &lt;- 0.36 estimates[[2]]$g0 &lt;- 0.68; estimates[[2]]$g0_cv &lt;- 0.36 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Unidentified rorquals # UNID rorquals (70) if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;070&#39;), pool = &#39;Unidentified rorqual&#39;, cohort = &#39;all&#39;, truncation_distance = 5.5, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- c(estimator(spp = &#39;070&#39;, title = &quot;Unidentified rorqual&quot;, alt_g0_spp = c(&#39;071&#39;,&#39;099&#39;,&#39;074&#39;,&#39;075&#39;), combine_g0 = TRUE)) if(g0_scenario==1){ estimates[[1]]$g0 &lt;- 0.35; estimates[[1]]$g0_cv &lt;- 0.18 estimates[[2]]$g0 &lt;- 0.32; estimates[[2]]$g0_cv &lt;- 0.20 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Unidentified dolphins # UNID dolphin (177, 277, 377, 77) if(TRUE){ # toggle spp &lt;- c(&#39;177&#39;,&#39;277&#39;,&#39;377&#39;,&#39;077&#39;) pool_title &lt;- &#39;Unidentified dolphin&#39; # Detection function specifications fit_filters &lt;- list(spp = c(&#39;177&#39;,&#39;277&#39;,&#39;377&#39;,&#39;077&#39;), pool = pool_title, cohort = &#39;all&#39;, truncation_distance = 5.5, other_species = &#39;coerce&#39;, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- estimator(spp = spp, title = pool_title, alt_g0_spp = c(&#39;002&#39;,&#39;013&#39;,&#39;018&#39;,&#39;015&#39;, &#39;036&#39;, &#39;021&#39;), combine_g0 = TRUE) if(g0_scenario==1){ estimates[[1]]$g0 &lt;- 0.33; estimates[[1]]$g0_cv &lt;- 0.08 estimates[[2]]$g0 &lt;- 0.29; estimates[[2]]$g0_cv &lt;- 0.10 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Unidentified cetaceans # UNID cetacean (78, 79, 98, 96) if(TRUE){ # toggle spp &lt;- c(&#39;078&#39;,&#39;079&#39;,&#39;098&#39;,&#39;096&#39;) pool_title &lt;- &#39;Unidentified cetacean&#39; # Detection function specifications fit_filters &lt;- list(spp = spp, pool = pool_title, cohort = &#39;all&#39;, truncation_distance = 5.5, other_species = &#39;coerce&#39;, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan estimates &lt;- estimator(spp = spp, title = pool_title, g0=1.0, g0_cv = 0.0) if(g0_scenario==1){ estimates[[1]]$g0 &lt;- 1.0; estimates[[1]]$g0_cv &lt;- 0.0 estimates[[2]]$g0 &lt;- 1.0; estimates[[2]]$g0_cv &lt;- 0.0 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Bottlenose dolphin # Bottlenose dolphin (018) if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;015&#39;, &#39;018&#39;, &#39;021&#39;, &#39;032&#39;), pool = &#39;Bottlenose dolphin&#39;, cohort = &#39;bottlenose&#39;, truncation_distance = 5, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan scenarios &lt;- list( list(years = 2017, regions = &#39;WHICEAS&#39;, regions_remove = c(&#39;Bottlenose_KaNi&#39;, &#39;Bottlenose_OUFI&#39;, &#39;Bottlenose_BI&#39;), region_title = &#39;(WHICEAS)&#39;), list(years = 2020, regions = &#39;WHICEAS&#39;, regions_remove = c(&#39;Bottlenose_KaNi&#39;, &#39;Bottlenose_OUFI&#39;, &#39;Bottlenose_BI&#39;), region_title = &#39;(WHICEAS)&#39;)) estimator &lt;- lta_estimates(scenarios) estimates &lt;- estimator(spp = &#39;018&#39;, title = &#39;Bottlenose dolphin&#39;) if(g0_scenario==1){ # No ALB sightings in 2017, using 2020 g0 estimates[[1]]$g0 &lt;- 0.24; estimates[[1]]$g0_cv &lt;- 0.38 estimates[[2]]$g0 &lt;- 0.24; estimates[[2]]$g0_cv &lt;- 0.38 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Pantropical spotted dolphin # Pantropical spotted dolphin (002) if(TRUE){ # toggle # Detection function specifications fit_filters &lt;- list(spp = c(&#39;002&#39;), pool = &#39;Pantropical spotted dolphin&#39;, cohort = &#39;spotted&#39;, truncation_distance = 5, years = years, regions = fit_regions, not_regions = fit_not_regions) # Density / abundance estimation plan scenarios &lt;- list( list(years = 2017, regions = &#39;WHICEAS&#39;, regions_remove = c(&#39;Spotted_OU&#39;, &#39;Spotted_FI&#39;, &#39;Spotted_BI&#39;), region_title = &#39;(WHICEAS)&#39;), list(years = 2020, regions = &#39;WHICEAS&#39;, regions_remove = c(&#39;Spotted_OU&#39;, &#39;Spotted_FI&#39;, &#39;Spotted_BI&#39;), region_title = &#39;(WHICEAS)&#39;)) estimator &lt;- lta_estimates(scenarios) estimates &lt;- estimator(spp = &#39;002&#39;, title = &#39;Pantropical spotted dolphin&#39;) if(g0_scenario==1){ estimates[[1]]$g0 &lt;- 0.28; estimates[[1]]$g0_cv &lt;- 0.11 estimates[[2]]$g0 &lt;- 0.25; estimates[[2]]$g0_cv &lt;- 0.13 } # Run analysis results &lt;- lta(cruz, Rg0, fit_filters, df_settings, estimates, use_g0 = TRUE, bootstraps = bootstraps, toplot=toplot, verbose=verbose) # Save result (results_file &lt;- paste0(results_path, fit_filters$pool, &#39;.RData&#39;)) saveRDS(results, file=results_file) } Results To review results, we will use g(0) scenario 3 (new auto-generated estimates of Relative g(0) from LTabundR). # Load results ltas &lt;- lta_enlist(&#39;whiceas/lta/&#39;) Tables Generate report: reporti &lt;- lta_report(ltas, cruz) Table 1. Sample sizes. The lta_report() function above attempts to generate sample size tables based on the cruz object and ltas results (see $table1a and $table1b outputs of lta_report()), but this is difficult to generalize into an automatic function, especially when cohort-specific geostrata are involved. To determine sample sizes with more control, we can write a quick helper function: sample_size &lt;- function(cruz, spp, cohort, years, td, in_region=NULL, region_remove = NULL){ suppressMessages({ sits &lt;- cruz$cohorts[[cohort]]$sightings %&gt;% filter(species %in% spp) %&gt;% filter(year %in% years) %&gt;% filter(stratum %in% in_region) %&gt;% filter(! stratum %in% region_remove) %&gt;% mutate(species = paste(spp, collapse=&#39;/&#39;)) %&gt;% group_by(species, year) %&gt;% summarize(ntot = n(), nsys = length(which(use == TRUE &amp; Bft &lt;= 6 &amp; EffType == &#39;S&#39;)), nest = length(which(use == TRUE &amp; included == TRUE &amp; Bft &lt;= 6 &amp; EffType == &#39;S&#39; &amp; PerpDistKm &lt;= td))) %&gt;% tidyr::pivot_longer(cols = ntot:nest) %&gt;% tidyr::pivot_wider(id_cols = species, names_from = year:name, values_from = value) }) return(sits) } Now we can use this function to generate sample size totals for each species/stock of interest: # Save years to re-use in the lines below years &lt;- c(2017, 2020) # Spotted dolphin sample_size(cruz, spp = &#39;002&#39;, cohort = 3, years, td = 5, in_region = &#39;WHICEAS&#39;, region_remove = c(&#39;Spotted_OU&#39;,&#39;Spotted_FI&#39;,&#39;Spotted_BI&#39;)) ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 002 10 7 6 6 4 4 ## # … with abbreviated variable name ¹ `2020_nest` # More efficient code for remaining species: sample_size(cruz, &#39;013&#39;, 1, years, 5, &#39;WHICEAS&#39;) # striped dolphin ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 013 4 3 3 8 3 3 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;015&#39;, 1, years, 5, &#39;WHICEAS&#39;) # rough-toothed dolphin ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 015 18 4 4 7 4 4 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;018&#39;, 2, years, 5, &#39;WHICEAS&#39;, # bottlenose dolphin c(&#39;Bottlenose_KaNi&#39;,&#39;Bottlenose_OUFI&#39;,&#39;Bottlenose_BI&#39;)) ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 018 1 0 0 3 3 3 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;021&#39;, 1, years, 5, &#39;WHICEAS&#39;) # risso&#39;s dolphin ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 021 5 2 2 5 4 4 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;026&#39;, 1, years, 5, &#39;WHICEAS&#39;) # fraser&#39;s dolphin ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2020_ntot` `2020_nsys` `2020_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 026 3 2 2 sample_size(cruz, &#39;031&#39;, 1, years, 5, &#39;WHICEAS&#39;) # melon-headed whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 031 4 2 2 6 3 3 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;032&#39;, 1, years, 5, &#39;WHICEAS&#39;) # pygmy killer whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 032 2 1 1 3 3 3 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;036&#39;, 1, years, 5, &#39;WHICEAS&#39;) # short-finned pilot whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 036 27 1 1 6 5 5 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;037&#39;, 1, years, 5.5, &#39;WHICEAS&#39;) # killer whale ## # A tibble: 0 × 1 ## # Groups: species [0] ## # … with 1 variable: species &lt;chr&gt; sample_size(cruz, &#39;046&#39;, 1, years, 5.5, &#39;WHICEAS&#39;) # sperm whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 046 5 1 1 14 10 8 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;047&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # pygmy sperm whale ## # A tibble: 0 × 1 ## # Groups: species [0] ## # … with 1 variable: species &lt;chr&gt; sample_size(cruz, &#39;048&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # dwarf sperm whale ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2020_ntot` `2020_nsys` `2020_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 048 1 1 1 sample_size(cruz, &#39;080&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # UNID Kogia ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 080 2 1 1 sample_size(cruz, &#39;049&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # UNID beaked whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 049 4 1 1 4 4 4 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;051&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # UNID Mesoplodon ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 051 1 0 0 3 2 2 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;059&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # Blainville&#39;s beaked whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 059 3 0 0 2 0 0 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;061&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # Cuvier&#39;s beaked whale ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 061 3 0 0 sample_size(cruz, &#39;065&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # Longman&#39;s beaked whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 065 3 2 2 1 1 1 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;070&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # UNID rorqual ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 070 2 1 1 15 4 2 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;071&#39;, 1, years, 4.5, &#39;WHICEAS&#39;) # Minke whale ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2020_ntot` `2020_nsys` `2020_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 071 1 1 0 sample_size(cruz, c(&#39;072&#39;,&#39;073&#39;,&#39;099&#39;,&#39;074&#39;), 1, years, 5, &#39;WHICEAS&#39;) # Sei/Bryde&#39;s/Fin ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2020_ntot` `2020_nsys` `2020_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 072/073/099/074 11 8 8 sample_size(cruz, &#39;073&#39;, 1, years, 5, &#39;WHICEAS&#39;) # Sei whale ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2020_ntot` `2020_nsys` `2020_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 073 5 3 3 sample_size(cruz, &#39;074&#39;, 1, years, 5, &#39;WHICEAS&#39;) # Fin whale ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2020_ntot` `2020_nsys` `2020_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 074 1 1 1 sample_size(cruz, &#39;075&#39;, 1, years, 5, &#39;WHICEAS&#39;) # Blue whale ## # A tibble: 0 × 1 ## # Groups: species [0] ## # … with 1 variable: species &lt;chr&gt; sample_size(cruz, &#39;076&#39;, 1, years, 5.5, &#39;WHICEAS&#39;) # Humpback whale ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` `2020_ntot` `2020_nsys` 2020_nes…¹ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 076 3 0 0 164 85 72 ## # … with abbreviated variable name ¹ `2020_nest` sample_size(cruz, &#39;099&#39;, 1, years, 5, &#39;WHICEAS&#39;) # Sei/Brydes ## # A tibble: 1 × 4 ## # Groups: species [1] ## species `2020_ntot` `2020_nsys` `2020_nest` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 099 5 4 4 sample_size(cruz, c(&#39;177&#39;,&#39;277&#39;,&#39;377&#39;,&#39;077&#39;), 1, years, 5.5, &#39;WHICEAS&#39;) # UNID dolphin ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` 2020_nto…¹ 2020_…² 2020_…³ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 177/277/377/077 18 4 3 23 11 8 ## # … with abbreviated variable names ¹ `2020_ntot`, ² `2020_nsys`, ³ `2020_nest` sample_size(cruz, c(&#39;078&#39;,&#39;079&#39;,&#39;098&#39;,&#39;096&#39;), 1, years, 5.5, &#39;WHICEAS&#39;) # UNID cetacean ## # A tibble: 1 × 7 ## # Groups: species [1] ## species `2017_ntot` `2017_nsys` `2017_nest` 2020_nto…¹ 2020_…² 2020_…³ ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 078/079/098/096 6 1 1 23 13 9 ## # … with abbreviated variable names ¹ `2020_ntot`, ² `2020_nsys`, ³ `2020_nest` To expedite building up this sample size table, consider copying and pasting the table produced by lta_report()$table1b, then filling in the blanks with values from above: Table 1b. Sample sizes of sightings used in density esitmation. Table 2. Detection functions for cetacean species and taxonomic categories. reporti$table2 Table 3. Estimates of line-transect parameters for cetacean species and taxonomic categories. reporti$table3 Table 4. Estimates of density (individuals per 1,000 km2) and abundance for cetacean species and taxonomic categories sighted while on systematic survey effort. reporti$table4 Table A1. Study areas. reporti$tableA1 Table A2. Effort totals and by Beaufort sea-state, in each survey year. reporti$tableA2 ## $`2017` ## # A tibble: 3 × 9 ## Species Stratum Effort B1 B2 B3 B4 B5 B6 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 spotted WHICEAS 4968 0.0191 0.0703 0.137 0.311 0.311 0.151 ## 2 bottlenose WHICEAS 5834 0.0188 0.0821 0.138 0.319 0.301 0.141 ## 3 all WHICEAS 6502 0.0200 0.0897 0.139 0.329 0.288 0.135 ## ## $`2020` ## # A tibble: 3 × 9 ## Species Stratum Effort B1 B2 B3 B4 B5 B6 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 spotted WHICEAS 4389 0.0137 0.0401 0.0717 0.263 0.380 0.231 ## 2 bottlenose WHICEAS 4938 0.0176 0.0461 0.0770 0.271 0.386 0.203 ## 3 all WHICEAS 5337 0.0165 0.0490 0.0813 0.278 0.376 0.200 Plots lta_plot(species = NULL, lta_result = ltas, years = c(2017, 2020)) Validation To validate our results and the routines within LTabundR, we will compare the LTabundR WHICEAS results to those from A.L. Bradford et al. (2022). To do so, we first bring in their results, which we’ve staged in a GoogleSheet provided in the code chunk below: library(gsheet) url &lt;- &#39;https://docs.google.com/spreadsheets/d/1S94I9I0R589Z8PFP41lYOF8hM6yetap7RFlPdBeet1M/edit?usp=sharing&#39; alb &lt;- gsheet2tbl(url) Next we format these data to facilitate joining and analyzing alongside our new WHICEAS results within a tidyverse framework: library(dplyr) library(tidyr) alb &lt;- alb %&gt;% mutate(title=gsub(&quot;&#39;&quot;,&quot;&quot;,species)) %&gt;% tidyr::pivot_longer(3:ncol(alb), names_to=&#39;column&#39;, values_to=&#39;value&#39;, values_transform = as.character) %&gt;% mutate(source=&#39;ALB et al. (2022)&#39;, title = species, code = stringr::str_pad(code,width=3, side=&#39;left&#39;, pad=&#39;0&#39;), year = ifelse(grepl(&#39;17&#39;, column), 2017, 2020) %&gt;% as.numeric) %&gt;% select(-species) %&gt;% rename(species = code) %&gt;% mutate(column = gsub(&#39;17&#39;,&#39;&#39;,column)) %&gt;% mutate(column = gsub(&#39;20&#39;,&#39;&#39;,column)) %&gt;% group_by(title, species, year) %&gt;% summarize(g0 = value[column == &#39;g0&#39;][1] %&gt;% as.numeric, g0_cv = value[column == &#39;gcv&#39;][1] %&gt;% as.numeric, ESW = value[column == &#39;esw&#39;] %&gt;% as.numeric, ss = value[column == &#39;ss&#39;] %&gt;% as.numeric, D = value[column == &#39;d&#39;] %&gt;% as.numeric, N = gsub(&#39;,&#39;,&#39;&#39;, value[column == &#39;n&#39;]) %&gt;% as.numeric, CV = value[column == &#39;cv&#39;] %&gt;% as.numeric, L95 = gsub(&#39;,&#39;,&#39;&#39;, value[column == &#39;lci&#39;]) %&gt;% as.numeric, U95 = gsub(&#39;,&#39;,&#39;&#39;, value[column == &#39;uci&#39;]) %&gt;% as.numeric) %&gt;% filter(!is.na(D)) %&gt;% mutate(N = round(N)) # Modify names names(alb)[4:ncol(alb)] &lt;- paste0(&#39;alb_&#39;,names(alb)[4:ncol(alb)] ) Review these results: alb LTabundR results We will compare the ALB et al. (2022) results to all three versions of the WHICEAS analysis we have produced: (1) manually specified g(0) parameters, (2) Rg(0) estimates from Barlow et al. (2015), and (3) new Rg(0) estimates produced by LTabundR automatically. We will bring those results back in and join each to the results from ALB et al. (2022), using a custom helper function, whiceas_join(): whiceas_join &lt;- function(alb, ltas){ # Combine core info from each LTA list into a dataframe ltabundr &lt;- data.frame() for(i in 1:length(ltas)){ lti &lt;- ltas[[i]] ltabundi &lt;- left_join(lti$estimate, lti$bootstrap$summary %&gt;% select(title, Region, year, species, iterations, g0_cv, CV, L95, U95), by=c(&#39;title&#39;, &#39;Region&#39;, &#39;year&#39;, &#39;species&#39;)) ltabundr &lt;- rbind(ltabundr, ltabundi) } # Format ltabundr data ltabundr &lt;- ltabundr %&gt;% mutate(year = as.numeric(year), D = D*1000, N = round(N)) %&gt;% select(title, species, year, g0=g0_est, g0_cv, ESW = ESW_mean, ss = size_mean, D, N, CV, L95, U95) # Join ALB to LTabundR mr &lt;- left_join(ltabundr, alb, by=c(&#39;title&#39;, &#39;year&#39;)) return(mr) } Read in, format, and join the results: # Manually-specified g0 ltas &lt;- lta_enlist(&#39;whiceas/lta_manual/&#39;) mr1 &lt;- whiceas_join(alb, ltas) %&gt;% mutate(scenario = &#39;Manual g(0)&#39;) # Barlow (2015) Rg0 ltas &lt;- lta_enlist(&#39;whiceas/lta_barlow/&#39;) mr2 &lt;- whiceas_join(alb, ltas) %&gt;% mutate(scenario = &#39;Barlow (2015) Rg(0)&#39;) # New auto-generated Rg(0) ltas &lt;- lta_enlist(&#39;whiceas/lta/&#39;) mr3 &lt;- whiceas_join(alb, ltas) %&gt;% mutate(scenario = &#39;New Rg(0) estimates&#39;) # Join them together mr &lt;- rbind(mr1, mr2, mr3) %&gt;% mutate(scenario = factor(scenario, levels = c(&#39;Manual g(0)&#39;, &#39;Barlow (2015) Rg(0)&#39;, &#39;New Rg(0) estimates&#39;))) Now we can compare LTabundR estimates to those from ALB et al. (2021): library(ggplot2) library(plotly) # Density ggplot(mr, aes(x=alb_D, y=D, color=title, shape=factor(year))) + geom_point() + scale_x_continuous(trans=&#39;log&#39;, limits=c(0.1, 50), breaks = c(0.01, 0.1, 0.25, 0.5, 1.0, 2.5, 5, 10, 25, 50), labels = function(x)round(x, 2)) + scale_y_continuous(trans=&#39;log&#39;, limits=c(0.1, 50), breaks = c(0.01, 0.1, 0.25, 0.5, 1.0, 2.5, 5, 10, 25, 50), labels = function(x)round(x, 2)) + geom_abline(slope = 1, intercept = 0, lty=3, alpha=.6) + ylab(&#39;LTabundR&#39;) + xlab(&#39;ALB et al. (2022)&#39;) + facet_wrap(~scenario, nrow=3) + labs(title=&#39;Density (cetaceans per 1,000 km2)&#39;, shape=&#39;Year&#39;, color = &#39;Species&#39;) + theme_light() # Abundance ggplot(mr, aes(x=alb_N, y=N, color=title, shape=factor(year))) + geom_point() + scale_x_continuous(trans=&#39;log&#39;, limits=c(10, 30000), breaks = c(10, 25, 100, 250, 1000, 2500, 10000, 30000), labels = function(x)round(x)) + scale_y_continuous(trans=&#39;log&#39;, limits=c(10, 30000), breaks = c(10, 25, 100, 250, 1000, 2500, 10000, 30000), labels = function(x)round(x)) + geom_abline(slope = 1, intercept = 0, lty=3, alpha=.6) + ylab(&#39;LTabundR&#39;) + xlab(&#39;ALB et al. (2022)&#39;) + facet_wrap(~scenario, nrow=3) + labs(title=&#39;WHICEAS abundance&#39;, shape=&#39;Year&#39;, color = &#39;Species&#39;) + theme_light() # g(0) estimate ggplot(mr, aes(x=alb_g0, y=g0, color=title, shape=factor(year))) + geom_point() + geom_abline(slope = 1, intercept = 0, lty=3, alpha=.6) + ylab(&#39;LTabundR&#39;) + xlab(&#39;ALB et al. (2022)&#39;) + facet_wrap(~scenario, nrow=3) + labs(title=&#39;Estimates of g(0)&#39;, shape=&#39;Year&#39;, color = &#39;Species&#39;) + theme_light() # g(0) CV estimate ggplot(mr, aes(x=alb_g0_cv, y=g0_cv, color=title, shape=factor(year))) + geom_point() + geom_abline(slope = 1, intercept = 0, lty=3, alpha=.6) + ylab(&#39;LTabundR&#39;) + xlab(&#39;ALB et al. (2022)&#39;) + facet_wrap(~scenario, nrow=3) + labs(title=&#39;Estimates of CV of g(0)&#39;, shape=&#39;Year&#39;, color = &#39;Species&#39;) + theme_light() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
